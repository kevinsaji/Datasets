import pandas as pd
import re
import csv
import os
from drain3 import TemplateMiner
from drain3.template_miner_config import TemplateMinerConfig

# ✅ Rex Patterns List (Add Your Patterns Here)
rex_patterns = [
    r'User \w+',              # Example: Anonymize usernames
    r'\d+\.\d+\.\d+\.\d+',    # Example: Anonymize IP addresses
]

def apply_rex(log_line, rex_list):
    """Apply multiple regex patterns on a log line."""
    for pattern in rex_list:
        log_line = re.sub(pattern, "<*>", log_line)
    return log_line

# ✅ Load Logs from CSV
csv_file = "logs.csv"
df = pd.read_csv(csv_file)
log_column = "log"
logs = df[log_column].astype(str).tolist()

# ✅ Initialize Drain3
config = TemplateMinerConfig()
config.load_default_config()
miner = TemplateMiner(config=config)

state_file = "drain3_state.json"

if os.path.exists(state_file):
    miner.load_state(state_file)
    print("Loaded Drain3 state.")
else:
    print("Starting fresh Drain3 session.")

# ✅ Output Files (Drain-style)
structured_log_file = "structuredlog.csv"
template_file = "logTemplates.txt"

# ✅ Open CSV for writing structured logs
with open(structured_log_file, "w", newline='') as f_out:
    csv_writer = csv.writer(f_out)
    # Header similar to Drain's structuredlog.csv
    csv_writer.writerow(["LineId", "Content", "EventId", "Template"])

    for idx, log_line in enumerate(logs):
        processed_log = apply_rex(log_line, rex_patterns)
        result = miner.add_log_message(processed_log)
        event_id = result['cluster_id'] if result['cluster_id'] else "None"
        template = result['template_mined'] if result['template_mined'] else "None"
        csv_writer.writerow([idx + 1, log_line, event_id, template])

# ✅ Save State
miner.save_state(state_file)
print("Saved Drain3 state to", state_file)

# ✅ Save Templates (Drain-like format)
with open(template_file, "w") as f_out:
    for cluster in miner.drain.clusters:
        f_out.write(f"{cluster.cluster_id},{cluster.get_template()}\n")

print(f"Structured logs saved to {structured_log_file}")
print(f"Templates saved to {template_file}")

